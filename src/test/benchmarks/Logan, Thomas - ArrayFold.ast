(MAIN-CLASS (ID ArrayFold)
(MAIN-MTD-DECLR (ID args) (BLOCK
(DOT (NEW-OBJECT (ID Star)) (FUN-CALL))
))

(CLASS (ID start)
(MTD-DECL INT (ID start) (TY-ID-LIST )(BLOCK
	(VAR-DECL (ID Arrays) (ID af))	(VAR-DECL INT[] (ID arr))	(VAR-DECL (ID Lt) (ID lt))	(VAR-DECL INT[] (ID filArr))	(VAR-DECL (ID Add) (ID addOp))	(VAR-DECL INT (ID sum))	(VAR-DECL (ID Mult) (ID multOp))	(VAR-DECL INT (ID prod))
(EQSIGN (ID arr) (NEW-INT[] (INTLIT 6)))(EQSIGN (ID af) (NEW-OBJECT (ID Arrays)))(EQSIGN (ID arr)[(INTLIT 0)]  (INTLIT 54))(EQSIGN (ID arr)[(INTLIT 1)]  (INTLIT 73))(EQSIGN (ID arr)[(INTLIT 2)]  (INTLIT 7))(EQSIGN (ID arr)[(INTLIT 3)]  (INTLIT 42))(EQSIGN (ID arr)[(INTLIT 4)]  (INTLIT 33))(EQSIGN (ID arr)[(INTLIT 5)]  (INTLIT 7))(PRINT (+ (STRINGLIT array: ) (DOT (ID af) (FUN-CALL (ID arr)))))(EQSIGN (ID lt) (NEW-OBJECT (ID Lt)))(DOT (ID lt) (FUN-CALL (INTLIT 41)))(EQSIGN (ID filArr) (DOT (ID af) (FUN-CALL (ID arr) (ID lt))))(PRINT (+ (STRINGLIT filtered array: ) (DOT (ID af) (FUN-CALL (ID filArr)))))(EQSIGN (ID addOp) (NEW-OBJECT (ID Add)))(EQSIGN (ID sum) (DOT (ID af) (FUN-CALL (ID arr) (ID addOp) (INTLIT 0))))(PRINT (+ (STRINGLIT array sum: ) (ID sum)))(EQSIGN (ID multOp) (NEW-OBJECT (ID Mult)))(EQSIGN (ID prod) (DOT (ID af) (FUN-CALL (ID arr) (ID multOp) (INTLIT 1))))(PRINT (+ (STRINGLIT array prod: ) (ID prod)))	
(RETURN (INTLIT 0)))))

(CLASS (ID Arrays)
(MTD-DECL STRING (ID toString) (TY-ID-LIST (INT[] (ID arr)))(BLOCK
	(VAR-DECL STRING (ID arrString))	(VAR-DECL INT (ID i))
(EQSIGN (ID arrString) (STRINGLIT ))(EQSIGN (ID i) (INTLIT 0))(WHILE (< (ID i) (LENGTH (ID arr)))
	(BLOCK(EQSIGN (ID arrString) (+ (ID arrString) (+ (ARRAY-LOOKUP (ID arr)[(ID i)] (STRINGLIT ,))))
(EQSIGN (ID i) (+ (ID i) (INTLIT 1)))
)
)	
(RETURN (ID arrString))))
(MTD-DECL INT[] (ID filter) (TY-ID-LIST (INT[] (ID arr))((ID IntToBool) (ID fil)))(BLOCK
	(VAR-DECL INT (ID i))	(VAR-DECL INT[] (ID tmpArr))	(VAR-DECL INT (ID x))	(VAR-DECL INT[] (ID finalArr))	(VAR-DECL INT (ID y))
(EQSIGN (ID i) (INTLIT 0))(EQSIGN (ID tmpArr) (NEW-INT[] (LENGTH (ID arr))))(EQSIGN (ID x) (INTLIT 0))(WHILE (< (ID i) (LENGTH (ID arr)))
	(BLOCK	(IF (DOT (ID fil) (FUN-CALL (ARRAY-LOOKUP (ID arr)[(ID i)]))
		(BLOCK(EQSIGN (ID tmpArr)[(ID x)]  (ARRAY-LOOKUP (ID arr)[(ID i)])
(EQSIGN (ID x) (+ (ID x) (INTLIT 1)))
)
		
	)
(EQSIGN (ID i) (+ (ID i) (INTLIT 1)))
)
)(EQSIGN (ID finalArr) (NEW-INT[] (ID x)))(EQSIGN (ID y) (INTLIT 0))(WHILE (< (ID y) (ID x))
	(BLOCK(EQSIGN (ID finalArr)[(ID y)]  (ARRAY-LOOKUP (ID tmpArr)[(ID y)])
(EQSIGN (ID y) (+ (ID y) (INTLIT 1)))
)
)	
(RETURN (ID finalArr))))
(MTD-DECL INT (ID fold) (TY-ID-LIST (INT[] (ID arr))((ID BinOp) (ID op))(INT (ID base)))(BLOCK
	(VAR-DECL INT (ID i))	(VAR-DECL INT (ID acc))
(EQSIGN (ID i) (INTLIT 0))(EQSIGN (ID acc) (ID base))(WHILE (< (ID i) (LENGTH (ID arr)))
	(BLOCK(EQSIGN (ID acc) (DOT (ID op) (FUN-CALL (ID acc) (ARRAY-LOOKUP (ID arr)[(ID i)])))
(EQSIGN (ID i) (+ (ID i) (INTLIT 1)))
)
)	
(RETURN (ID acc)))))

(CLASS (ID BinOp)
(MTD-DECL INT (ID f) (TY-ID-LIST (INT (ID a))(INT (ID b)))(BLOCK

	
(RETURN (INTLIT 0)))))

(CLASS (ID IntToBool)
(MTD-DECL BOOLEAN (ID f) (TY-ID-LIST (INT (ID a)))(BLOCK

	
(RETURN FALSE))))

(CLASS (ID Add)EXTENDS (ID BinOp)
(MTD-DECL INT (ID f) (TY-ID-LIST (INT (ID a))(INT (ID b)))(BLOCK

	
(RETURN (+ (ID a) (ID b))))))

(CLASS (ID Mult)EXTENDS (ID BinOp)
(MTD-DECL INT (ID f) (TY-ID-LIST (INT (ID a))(INT (ID b)))(BLOCK

	
(RETURN (* (ID a) (ID b))))))

(CLASS (ID Lt)EXTENDS (ID IntToBool)
(VAR-DECL INT (ID b))
(MTD-DECL BOOLEAN (ID f) (TY-ID-LIST (INT (ID a)))(BLOCK

	
(RETURN (< (ID a) (ID b)))))
(MTD-DECL BOOLEAN (ID setB) (TY-ID-LIST (INT (ID c)))(BLOCK

(EQSIGN (ID b) (ID c))	
(RETURN TRUE)))
(MTD-DECL INT (ID getB) (TY-ID-LIST )(BLOCK

	
(RETURN (ID b)))))