(MAIN-CLASS (ID PrimesMain)
(MAIN-MTD-DECLR (ID a)
(BLOCK
(PRINT (DOT (NEW-OBJECT (ID Primes)) (FUN-CALL (ID getPrimesSlow))))
(PRINT (DOT (NEW-OBJECT (ID Primes)) (FUN-CALL (ID getPrimesFast)))))
)
(CLASS (ID Primes)
(MTD-DECL STRING (ID getPrimesSlow) (TY-ID-LIST )
(BLOCK
(VAR-DECL INT[] (ID primes))
(VAR-DECL INT (ID index))
(VAR-DECL STRING (ID s))
(EQSIGN (ID index) (INTLIT 0))
(EQSIGN (ID s) (STRINGLIT ))
(EQSIGN (ID primes) (DOT (NEW-OBJECT (ID PrimeGen)) (FUN-CALL (ID generatePrimesSlow) (INTLIT 1000))))
(WHILE (NOT (== (ARRAY-INDEX (ID primes) (ID index)) (INTLIT 0)))
	(BLOCK
(EQSIGN (ID s) (+ (ID s) (+ (ARRAY-INDEX (ID primes) (ID index)) (STRINGLIT  ))))
(EQSIGN (ID index) (+ (ID index) (INTLIT 1))))
)
(RETURN (ID s))))
(MTD-DECL STRING (ID getPrimesFast) (TY-ID-LIST )
(BLOCK
(VAR-DECL INT[] (ID primes))
(VAR-DECL INT (ID index))
(VAR-DECL STRING (ID s))
(EQSIGN (ID index) (INTLIT 0))
(EQSIGN (ID s) (STRINGLIT ))
(EQSIGN (ID primes) (DOT (NEW-OBJECT (ID PrimeGen)) (FUN-CALL (ID generatePrimesFast) (INTLIT 1000))))
(WHILE (NOT (== (ARRAY-INDEX (ID primes) (ID index)) (INTLIT 0)))
	(BLOCK
(EQSIGN (ID s) (+ (ID s) (+ (ARRAY-INDEX (ID primes) (ID index)) (STRINGLIT  ))))
(EQSIGN (ID index) (+ (ID index) (INTLIT 1))))
)
(RETURN (ID s)))))
(CLASS (ID PrimeGen)
(MTD-DECL INT[] (ID generatePrimesSlow) (TY-ID-LIST (INT (ID num)))
(BLOCK
(VAR-DECL INT[] (ID primes))
(VAR-DECL INT (ID primesIndex))
(VAR-DECL INT (ID i))
(EQSIGN (ID primes) (NEW-INT[](ID num)))
(EQSIGN (ARRAY-INDEX (ID primes) (INTLIT 0)) (INTLIT 1))
(EQSIGN (ID primesIndex) (INTLIT 1))
(EQSIGN (ID i) (INTLIT 2))
(WHILE (< (ID i) (ID num))
	(BLOCK
(IF (DOT THIS (FUN-CALL (ID isPrimeSlow) (ID i)))
	(BLOCK
(EQSIGN (ARRAY-INDEX (ID primes) (ID primesIndex)) (ID i))
(EQSIGN (ID primesIndex) (+ (ID primesIndex) (INTLIT 1))))
	
)
(EQSIGN (ID i) (+ (ID i) (INTLIT 1))))
)
(RETURN (ID primes))))
(MTD-DECL INT[] (ID generatePrimesFast) (TY-ID-LIST (INT (ID num)))
(BLOCK
(VAR-DECL INT[] (ID primes))
(VAR-DECL INT (ID primesIndex))
(VAR-DECL INT (ID i))
(EQSIGN (ID primes) (NEW-INT[](ID num)))
(EQSIGN (ARRAY-INDEX (ID primes) (INTLIT 0)) (INTLIT 1))
(EQSIGN (ID primesIndex) (INTLIT 1))
(EQSIGN (ID i) (INTLIT 3))
(WHILE (< (ID i) (ID num))
	(BLOCK
(IF (DOT THIS (FUN-CALL (ID isPrimeFast) (ID i)))
	(BLOCK
(EQSIGN (ARRAY-INDEX (ID primes) (ID primesIndex)) (ID i))
(EQSIGN (ID primesIndex) (+ (ID primesIndex) (INTLIT 1))))
	
)
(EQSIGN (ID i) (+ (ID i) (INTLIT 2))))
)
(RETURN (ID primes))))
(MTD-DECL BOOLEAN (ID isPrimeSlow) (TY-ID-LIST (INT (ID num)))
(BLOCK
(VAR-DECL BOOLEAN (ID isPrime))
(VAR-DECL INT (ID i))
(EQSIGN (ID isPrime) true)
(IF (DOT (NEW-OBJECT (ID Math)) (FUN-CALL (ID isDivisible) (ID num) (INTLIT 2)))
	(EQSIGN (ID isPrime) false)
	
)
(EQSIGN (ID i) (INTLIT 2))
(WHILE (< (ID i) (ID num))
	(BLOCK
(IF (DOT (NEW-OBJECT (ID Math)) (FUN-CALL (ID isDivisible) (ID num) (ID i)))
	(EQSIGN (ID isPrime) false)
	
)
(EQSIGN (ID i) (+ (ID i) (INTLIT 1))))
)
(RETURN (ID isPrime))))
(MTD-DECL BOOLEAN (ID isPrimeFast) (TY-ID-LIST (INT (ID num)))
(BLOCK
(VAR-DECL BOOLEAN (ID returnValue))
(VAR-DECL INT (ID sqrt))
(VAR-DECL INT (ID i))
(EQSIGN (ID returnValue) true)
(IF (DOT (NEW-OBJECT (ID Math)) (FUN-CALL (ID isDivisible) (ID num) (INTLIT 2)))
	(EQSIGN (ID returnValue) false)
	(BLOCK
(EQSIGN (ID sqrt) (DOT (NEW-OBJECT (ID Math)) (FUN-CALL (ID sqrtFloor) (ID num))))
(EQSIGN (ID i) (INTLIT 3))
(WHILE (&& (< (ID i) (+ (ID sqrt) (INTLIT 1))) (ID returnValue))
	(BLOCK
(IF (DOT (NEW-OBJECT (ID Math)) (FUN-CALL (ID isDivisible) (ID num) (ID i)))
	(EQSIGN (ID returnValue) false)
	(EQSIGN (ID i) (+ (ID i) (INTLIT 2)))
))
))
)
(RETURN (ID returnValue)))))
(CLASS (ID Math)
(MTD-DECL BOOLEAN (ID isDivisible) (TY-ID-LIST (INT (ID dividend))(INT (ID divisor)))
(BLOCK
(VAR-DECL INT (ID quotient))
(EQSIGN (ID quotient) (/ (ID dividend) (ID divisor)))
(RETURN (* (ID quotient) (== (ID divisor) (ID dividend))))))
(MTD-DECL INT (ID sqrtFloor) (TY-ID-LIST (INT (ID num)))
(BLOCK
(VAR-DECL INT (ID i))
(EQSIGN (ID i) (INTLIT 2))
(WHILE (< (* (ID i) (ID i)) (ID num))
	(BLOCK
(EQSIGN (ID i) (+ (ID i) (INTLIT 1))))
)
(IF (< (ID num) (* (ID i) (ID i)))
	(BLOCK
(EQSIGN (ID i) (- (ID i) (INTLIT 1))))
	
)
(RETURN (ID i)))))