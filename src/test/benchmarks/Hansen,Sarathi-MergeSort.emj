public class Main {
  public static void main (String [] args) {
    MergeSort ms = new MergeSort ();
    
    // test 1: standard
    int [] a = new int [5];
    a [0] = 3; a [1] = 6; a [2] = 2; a [3] = 1; a [4] = 7;
    ms.sort(a);
    if (a [0] == 1 && a [1] == 2 && a [2] == 3 && a [3] == 6 && a [4] == 7) {
      System.out.println ("Test 1 [3,6,2,1,7]: Pass");
    } else {
      System.out.println ("Test 1 [3,6,2,1,7]: Fail. Result: [" + a [0] + "," + a [1] + "," + a [2] + "," + a [3] + "," + a[4] + "]");
    }
    
    // test 2: negatives and duplicates
    int [] b = new int [5];
    b [0] = 9; b [1] = 1; b [2] = 1; b [3] = -8; b [4] = 3;
    ms.sort(b);
    if (b [0] == -8 && b [1] == 1 && b [2] == 1 && b [3] == 3 && b [4] == 9) {
      System.out.println ("Test 2 [9,1,1,-8,3]: Pass");
    } else {
      System.out.println ("Test 2 [9,1,1,-8,3]: Fail. Result: [" + b [0] + "," + b [1] + "," + b [2] + "," + b [3] + "," + b[4] + "]");
    }
    
    // test 3: empty list
    int [] c = new int [0];
    ms.sort(c);
    if (c.length == 0) {
      System.out.println ("Test 3 []: Pass");
    } else {
      System.out.println ("Test 3 []: Fail");
    }
    
    // test 4: one item
    int [] d = new int [1];
    d [0] = 8;
    ms.sort(d);
    if (d [0] == 8) {
      System.out.println ("Test 4 [8]: Pass");
    } else {
      System.out.println ("Test 4 [8]: Fail. Result: [" + d [0] + "]");
    }
  }
}

public class MergeSort {
  public void sort (int [] list) {
    int [] tmp = new int [list.length];
    sortHelper (list, tmp, 0, list.length-1);
  }
  
  public void sortHelper (int [] list, int [] tmp, int left, int right) {
    if (left < right) {
      int center = (left + right) / 2;
      sortHelper (list, tmp, left, center);
      sortHelper (list, tmp, center+1, right);
      merge (list, tmp, left, center+1, right);
    }
  }
  
  private void merge (int [] list, int [] tmp, int left, int right, int rightEnd) {
    int leftEnd = right - 1;
    int k = left;
    int num = rightEnd - left + 1;
    
    while (left <= leftEnd && right <= rightEnd) {
      if (list [left] < list [right]) {
        tmp [k] = list [left];
        left = left + 1;
      } else {
        tmp [k] = list [right];
        right = right + 1;
      }
      k = k + 1;
    }
    
    while (left <= leftEnd) {
      tmp [k] = list [left];
      k = k + 1;
      left = left + 1;
    }
    
    while (right <= rightEnd) {
      tmp [k] = list [right];
      k = k + 1;
      right = right + 1;
    }
    
    int i = 0;
    while (i < num) {
      list [rightEnd] = tmp [rightEnd];
      i = i + 1;
      rightEnd = rightEnd - 1;
    }
  }
}
