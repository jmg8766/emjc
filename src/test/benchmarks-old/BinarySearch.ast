(MAIN-CLASS (ID BinarySearch)
(MAIN-MTD-DECLR (ID a)
(PRINT (DOT (NEW-OBJECT (ID BS)) (FUN-CALL (ID Start) (INTLIT 20))))
)
(CLASS (ID BS)
(VAR-DECL INT[] (ID number))
(VAR-DECL INT (ID size))
(MTD-DECL INT (ID Start) (TY-ID-LIST (INT (ID sz)))
(BLOCK
(VAR-DECL INT (ID aux01))
(VAR-DECL INT (ID aux02))
(EQSIGN (ID aux01) (DOT THIS (FUN-CALL (ID Init) (ID sz))))
(EQSIGN (ID aux02) (DOT THIS (FUN-CALL (ID Print))))
(IF (DOT THIS (FUN-CALL (ID Search) (INTLIT 8)))
	(PRINT (INTLIT 1))
	(PRINT (INTLIT 0))
)
(IF (DOT THIS (FUN-CALL (ID Search) (INTLIT 19)))
	(PRINT (INTLIT 1))
	(PRINT (INTLIT 0))
)
(IF (DOT THIS (FUN-CALL (ID Search) (INTLIT 20)))
	(PRINT (INTLIT 1))
	(PRINT (INTLIT 0))
)
(IF (DOT THIS (FUN-CALL (ID Search) (INTLIT 21)))
	(PRINT (INTLIT 1))
	(PRINT (INTLIT 0))
)
(IF (DOT THIS (FUN-CALL (ID Search) (INTLIT 37)))
	(PRINT (INTLIT 1))
	(PRINT (INTLIT 0))
)
(IF (DOT THIS (FUN-CALL (ID Search) (INTLIT 38)))
	(PRINT (INTLIT 1))
	(PRINT (INTLIT 0))
)
(IF (DOT THIS (FUN-CALL (ID Search) (INTLIT 39)))
	(PRINT (INTLIT 1))
	(PRINT (INTLIT 0))
)
(IF (DOT THIS (FUN-CALL (ID Search) (INTLIT 50)))
	(PRINT (INTLIT 1))
	(PRINT (INTLIT 0))
)
(RETURN (INTLIT 999))))
(MTD-DECL BOOLEAN (ID Search) (TY-ID-LIST (INT (ID num)))
(BLOCK
(VAR-DECL BOOLEAN (ID bs01))
(VAR-DECL INT (ID right))
(VAR-DECL INT (ID left))
(VAR-DECL BOOLEAN (ID var_cont))
(VAR-DECL INT (ID medium))
(VAR-DECL INT (ID aux01))
(VAR-DECL INT (ID nt))
(EQSIGN (ID aux01) (INTLIT 0))
(EQSIGN (ID bs01) false)
(EQSIGN (ID right) (LENGTH))
(EQSIGN (ID right) (- (ID right) (INTLIT 1)))
(EQSIGN (ID left) (INTLIT 0))
(EQSIGN (ID var_cont) true)
(WHILE (ID var_cont)
	(BLOCK
(EQSIGN (ID medium) (+ (ID left) (ID right)))
(EQSIGN (ID medium) (DOT THIS (FUN-CALL (ID Div) (ID medium))))
(EQSIGN (ID aux01) (ARRAY-INDEX (ID number) (ID medium)))
(IF (< (ID num) (ID aux01))
	(EQSIGN (ID right) (- (ID medium) (INTLIT 1)))
	(EQSIGN (ID left) (+ (ID medium) (INTLIT 1)))
)
(IF (DOT THIS (FUN-CALL (ID Compare) (ID aux01) (ID num)))
	(EQSIGN (ID var_cont) false)
	(EQSIGN (ID var_cont) true)
)
(IF (< (ID right) (ID left))
	(EQSIGN (ID var_cont) false)
	(EQSIGN (ID nt) (INTLIT 0))
))
)
(IF (DOT THIS (FUN-CALL (ID Compare) (ID aux01) (ID num)))
	(EQSIGN (ID bs01) true)
	(EQSIGN (ID bs01) false)
)
(RETURN (ID bs01))))
(MTD-DECL INT (ID Div) (TY-ID-LIST (INT (ID num)))
(BLOCK
(VAR-DECL INT (ID count01))
(VAR-DECL INT (ID count02))
(VAR-DECL INT (ID aux03))
(EQSIGN (ID count01) (INTLIT 0))
(EQSIGN (ID count02) (INTLIT 0))
(EQSIGN (ID aux03) (- (ID num) (INTLIT 1)))
(WHILE (< (ID count02) (ID aux03))
	(BLOCK
(EQSIGN (ID count01) (+ (ID count01) (INTLIT 1)))
(EQSIGN (ID count02) (+ (ID count02) (INTLIT 2))))
)
(RETURN (ID count01))))
(MTD-DECL BOOLEAN (ID Compare) (TY-ID-LIST (INT (ID num1))(INT (ID num2)))
(BLOCK
(VAR-DECL BOOLEAN (ID retval))
(VAR-DECL INT (ID aux02))
(EQSIGN (ID retval) false)
(EQSIGN (ID aux02) (+ (ID num2) (INTLIT 1)))
(IF (< (ID num1) (ID num2))
	(EQSIGN (ID retval) false)
	(IF (NOT (< (ID num1) (ID aux02)))
	(EQSIGN (ID retval) false)
	(EQSIGN (ID retval) true)
)
)
(RETURN (ID retval))))
(MTD-DECL INT (ID Print) (TY-ID-LIST )
(BLOCK
(VAR-DECL INT (ID j))
(EQSIGN (ID j) (INTLIT 1))
(WHILE (< (ID j) (ID size))
	(BLOCK
(PRINT (ARRAY-INDEX (ID number) (ID j)))
(EQSIGN (ID j) (+ (ID j) (INTLIT 1))))
)
(PRINT (INTLIT 99999))
(RETURN (INTLIT 0))))
(MTD-DECL INT (ID Init) (TY-ID-LIST (INT (ID sz)))
(BLOCK
(VAR-DECL INT (ID j))
(VAR-DECL INT (ID k))
(VAR-DECL INT (ID aux02))
(VAR-DECL INT (ID aux01))
(EQSIGN (ID size) (ID sz))
(EQSIGN (ID number) (NEW-INT[](ID sz)))
(EQSIGN (ID j) (INTLIT 1))
(EQSIGN (ID k) (+ (ID size) (INTLIT 1)))
(WHILE (< (ID j) (ID size))
	(BLOCK
(EQSIGN (ID aux01) (* (INTLIT 2) (ID j)))
(EQSIGN (ID aux02) (- (ID k) (INTLIT 3)))
(EQSIGN (ARRAY-INDEX (ID number) (ID j)) (+ (ID aux01) (ID aux02)))
(EQSIGN (ID j) (+ (ID j) (INTLIT 1)))
(EQSIGN (ID k) (- (ID k) (INTLIT 1))))
)
(RETURN (INTLIT 0)))))